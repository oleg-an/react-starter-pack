{
  "extends": [
    "eslint:recommended",
    "airbnb",
    "prettier",
    "plugin:react-hook-form/recommended",
    "plugin:jest-dom/recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "overrides": [
    {
      "files": ["**/*.ts?(x)"],
      "rules": {
        "import/no-duplicates": 0,
        "no-duplicate-imports": "off",
        "react/prop-types": 0
      }
    }
  ],
  "plugins": [
    "prettier",
    "eslint-plugin-prettier",
    "unused-imports",
    "check-file",
    "react-hook-form",
    "jest-dom",
    "@typescript-eslint"
  ],
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.json"]
  },
  "rules": {
    "max-len": [
      "error",
      {
        "code": 120,
        "tabWidth": 2,
        "ignoreComments": true,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true
      }
    ],
    "check-file/folder-naming-convention": [
      "error",
      {
        "src/**": "KEBAB_CASE",
        "e2e/**": "KEBAB_CASE"
      }
    ],
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "@playwright/test",
            "importNames": ["expect", "test"],
            "message": "Please use expect and test from playwright-test-coverage instead."
          },
          {
            "name": "@growthbook/growthbook-react",
            "message": "Please use more properly typed `utils/growthbook.tsx` instead of `@growthbook/growthbook-react`. It contains all the source package plus enhanced typings and few additions."
          }
        ]
      }
    ],
    "check-file/filename-naming-convention": [
      "error",
      {
        "src/{components,pages}/**/*.tsx": "PASCAL_CASE",
        "src/{api,components,pages,utils}/*.ts": "KEBAB_CASE",
        "src/interfaces/**/*.ts": "CAMEL_CASE",
        "e2e/**/*.ts": "KEBAB_CASE"
      },
      {
        "ignoreMiddleExtensions": true
      }
    ],
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "newlines-between": "always"
      }
    ],
    "no-useless-backreference": "error",
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-constructor": "error",
    "no-useless-escape": "error",
    "no-useless-rename": "error",
    "no-useless-return": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "jsx-a11y/anchor-is-valid": "off",
    "no-restricted-syntax": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/ban-types": "off",
    "no-undef": "off",
    "newline-after-var": "error",
    "curly": ["error", "all"],
    "newline-before-return": "error",
    "unused-imports/no-unused-imports": "error",
    "consistent-return": "off",
    "react/no-danger": 0,
    "jsx-a11y/no-noninteractive-element-interactions": 0,
    "eslint-disable-next-line": "off",
    "react/jsx-no-useless-fragment": "off",
    "react/button-has-type": "off",
    "jest/no-disabled-tests": 0,
    "jsx-a11y/label-has-associated-control": 0,
    "jsx-a11y/label-has-for": 0,
    "react/no-multi-comp": 0,
    "jsx-a11y/accessible-emoji": 0,
    "jsx-a11y/mouse-events-have-key-events": 0,
    "react/jsx-filename-extension": 0,
    "react/prefer-stateless-function": 0,
    "react/destructuring-assignment": 0,
    "react/no-access-state-in-setstate": 1,
    "react/no-did-update-set-state": 0,
    "react/require-default-props": 0,
    "react/jsx-props-no-spreading": 0,
    "react/jsx-fragments": 0,
    "react/react-in-jsx-scope": 0,
    "react/static-property-placement": 0,
    "react/jsx-curly-brace-presence": 0,
    "react/state-in-constructor": 0,
    "react/sort-comp": 0,
    "react/forbid-prop-types": [
      "warn",
      {
        "forbid": ["any"]
      }
    ],
    "import/no-extraneous-dependencies": 0,
    "import/extensions": 0,
    "import/no-unresolved": 0,
    "import/no-named-as-default": 0,
    "import/prefer-default-export": 0,
    "import/no-default-export": "error",
    "import/first": 1,
    "import/newline-after-import": 1,
    "prefer-object-spread": 0,
    "max-classes-per-file": 0,
    "no-debugger": 1,
    "no-console": "off",
    "no-plusplus": [
      "error",
      {
        "allowForLoopAfterthoughts": true
      }
    ],
    "no-mixed-operators": 0,
    "no-underscore-dangle": 0,
    "class-methods-use-this": 0,
    "no-param-reassign": 0,
    "no-increment-decrement": 0,
    "prefer-destructuring": 0,
    "camelcase": 0,
    "react/no-array-index-key": 0,
    "react-hooks/exhaustive-deps": 0,
    "no-use-before-define": "off",
    "react/no-unescaped-entities": 0,
    "no-unused-expressions": "off",
    "jsx-a11y/click-events-have-key-events": "off",
    "jsx-a11y/no-static-element-interactions": "off",
    "prettier/prettier": [
      "error",
      {
        "endOfLine": "auto"
      }
    ],
    "prefer-const": "off",
    "no-shadow": "off",
    "jsx-a11y/media-has-caption": "off",
    "arrow-body-style": "off",
    "import/no-anonymous-default-export": "off",
    "react/jsx-key": [
      "error",
      {
        "checkFragmentShorthand": true
      }
    ],
    "@typescript-eslint/no-unused-vars": ["error"],
    "@typescript-eslint/no-explicit-any": ["error"],
    "no-restricted-properties": [
      2,
      {
        "object": "Object",
        "property": "keys",
        "message": "Please use more precisely typed helper `getKeys(obj)` from src/utils/object.ts. `Object.keys` always returns `string[]` type not actual `(keyof T)[]` for a reason but in 99% cases we sure it will be keys. More details in comments to `getKeys` util"
      }
    ],
    "@typescript-eslint/consistent-indexed-object-style": ["error", "record"],
    "no-empty-function": ["error"]
  },
  "globals": {
    "page": true,
    "browser": true,
    "context": true
  }
}
